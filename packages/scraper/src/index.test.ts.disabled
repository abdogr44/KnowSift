import { fetchTranscript } from './index';

describe('fetchTranscript', () => {
  const oldFetch = global.fetch;
  const mockFetch = jest.fn();

  beforeEach(() => {
    process.env.APIFY_TOKEN = 'token';
    mockFetch.mockResolvedValue({
      ok: true,
      json: async () => [{ transcript: 'hello', metadata: { title: 't' } }],
    } as unknown as Response);
    (global as unknown as { fetch: jest.Mock }).fetch = mockFetch;
  });

  afterEach(() => {
    (global as unknown as { fetch: jest.Mock }).fetch =
      oldFetch as typeof mockFetch;
    mockFetch.mockReset();
  });

  it('returns transcript and metadata', async () => {
    const result = await fetchTranscript('http://example.com');
    expect(result).toEqual({ transcript: 'hello', metadata: { title: 't' } });
    const expectedEndpoint =
      'https://api.apify.com/v2/acts/pintostudio/youtube-transcript-scraper/runs/' +
      'run-sync-get-dataset-items?token=token';
    expect(mockFetch).toHaveBeenCalledWith(
      expectedEndpoint,
      expect.any(Object),
    );
  });

  it('throws if token missing', async () => {
    delete process.env.APIFY_TOKEN;
    await expect(fetchTranscript('http://example.com')).rejects.toThrow();
  });
});

import { saveTranscriptToSupabase } from './index';
import { createClient } from '@supabase/supabase-js';

jest.mock('@supabase/supabase-js', () => ({
  createClient: jest.fn(),
}));

describe('saveTranscriptToSupabase', () => {
  const insert = jest.fn().mockResolvedValue(undefined);
  beforeEach(() => {
    (createClient as jest.Mock).mockReturnValue({ from: () => ({ insert }) });
    process.env.NEXT_PUBLIC_SUPABASE_URL = 'url';
    process.env.SUPABASE_SERVICE_ROLE_KEY = 'key';
  });

  afterEach(() => {
    (createClient as jest.Mock).mockReset();
    insert.mockReset();
  });

  it('inserts record', async () => {
    await saveTranscriptToSupabase('u', 't', { a: 1 });
    expect(createClient).toHaveBeenCalledWith('url', 'key');
    expect(insert).toHaveBeenCalledWith({
      url: 'u',
      transcript: 't',
      metadata: { a: 1 },
    });
  });

  it('throws without env vars', async () => {
    delete process.env.NEXT_PUBLIC_SUPABASE_URL;
    await expect(saveTranscriptToSupabase('u', 't', {})).rejects.toThrow();
  });
});
